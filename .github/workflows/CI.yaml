name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  RUSTFLAGS: -Dwarnings

jobs:
  build_and_test:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [stable, beta]

    steps:
    - uses: actions/checkout@v2

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-
    - name: Cache cargo git
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-git-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-git-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ matrix.rust }}-cargo-git-
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-

    - run: mkdir -p ~/.cargo/git

    - name: Run cargo fetch
      uses: actions-rs/cargo@v1
      with:
        command: fetch

    - name: Run cargo check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --examples

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --all

  check_fmt_and_docs:
    name: Checking fmt, clippy, and docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-lint-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-lint-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-lint-cargo-registry-
    - name: Cache cargo git
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-lint-cargo-git-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-lint-cargo-git-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-lint-cargo-git-
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-lint-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-lint-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-lint-cargo-build-target-

    - run: mkdir -p ~/.cargo/git

    - name: Run cargo fetch
      uses: actions-rs/cargo@v1
      with:
        command: fetch

    - name: clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --tests --examples -- -D warnings

    - name: fmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

    - name: Docs
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --no-deps

  # The macos env behaves strangely with cargo target dir caching;
  # for now we isolate this build here for separate experimentation,
  # also this build is allowed to fail
  build_macos:
    name: Build and test
    runs-on: macos-latest
    continue-on-error: true
    strategy:
      fail-fast: true
      matrix:
        rust: [stable, beta]

    steps:
    - uses: actions/checkout@v2

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-
    - name: Cache cargo git
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-git-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-git-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ matrix.rust }}-cargo-git-
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-${{ hashFiles('**/src/lib.rs') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.toml') }}-
          ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-

    - run: mkdir -p ~/.cargo/git

    - name: Run cargo fetch
      uses: actions-rs/cargo@v1
      with:
        command: fetch

    - name: Run cargo check
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all --examples

    # - name: Run tests
    #   uses: actions-rs/cargo@v1
    #   with:
    #     command: test
    #     args: --all
